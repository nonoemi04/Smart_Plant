#include <SPI.h>
#include <Wire.h>
#include "DHT.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


#define DHTPIN 2
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);
#define LOGO_HEIGHT   32 //16
#define LOGO_WIDTH    32 //16

float LIGHT;
float MOISTURE;
float TEMP;
float HUMID;

//FORM THE BITMAPS
static const unsigned char PROGMEM logo_bmp[] =
{ 0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x3c,0x00,0x00
,0x00,0x66,0x38,0x00
,0x00,0x81,0x6c,0x00
,0x00,0x81,0xc6,0x00
,0x00,0x81,0x82,0x00
,0x00,0xc0,0x82,0x00
,0x00,0x63,0x86,0x00
,0x00,0x3e,0xfc,0x00
,0x00,0x3a,0x44,0x00
,0x00,0x62,0xc6,0x00
,0x00,0x43,0x82,0x00
,0x00,0xc2,0x82,0x00
,0x00,0xc6,0xfe,0x00
,0x00,0x7c,0x98,0x00
,0x00,0x00,0x80,0x00
,0x00,0x00,0x80,0x00
,0x00,0x00,0x80,0x00
,0x00,0x00,0x82,0x00
,0x00,0x00,0x86,0x00
,0x00,0x00,0x9c,0x00
,0x00,0x1e,0xf8,0x00
,0x00,0x07,0xf0,0x00
,0x00,0x01,0xe0,0x00
,0x00,0x00,0xc0,0x00
,0x00,0x00,0x00,0x00
 };


static const unsigned char PROGMEM sad_bmp[] =
{
  0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x03,0xc0,0x00
,0x00,0x18,0x18,0x00
,0x00,0x40,0x02,0x00
,0x00,0x00,0x00,0x00
,0x00,0x60,0x0e,0x00
,0x01,0xf0,0x1f,0x80
,0x01,0xf8,0x3f,0xa0
,0x03,0x9c,0x39,0xc0
,0x03,0x9c,0x31,0xd0
,0x13,0xf8,0x39,0xc0
,0x01,0xf8,0x1f,0x88
,0x00,0xf0,0x1f,0x08
,0x00,0x00,0x04,0x08
,0x00,0x00,0x00,0x08
,0x00,0x00,0x00,0x08
,0x00,0x03,0xe0,0x00
,0x10,0x04,0x10,0x00
,0x00,0x08,0x00,0x10
,0x08,0x10,0x08,0x00
,0x00,0x10,0x08,0x00
,0x00,0x10,0x00,0x00
,0x00,0x00,0x04,0x80
,0x00,0x80,0x00,0x00
,0x00,0x20,0x04,0x00
,0x00,0x0f,0xf0,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00

};

static const unsigned char PROGMEM happy_bmp[] =
{
0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x03,0xc0,0x00
,0x00,0x18,0x18,0x00
,0x00,0x40,0x02,0x00
,0x00,0x00,0x00,0x00
,0x00,0x60,0x0e,0x00
,0x01,0xf0,0x1f,0x80
,0x01,0xf8,0x3f,0xa0
,0x03,0x9c,0x39,0xc0
,0x03,0x9c,0x31,0xd0
,0x13,0xf8,0x39,0xc0
,0x01,0xf8,0x1f,0x88
,0x00,0xf0,0x1f,0x08
,0x00,0x00,0x04,0x08
,0x00,0x00,0x00,0x08
,0x02,0x00,0x00,0x68
,0x03,0x00,0x00,0x40
,0x11,0x00,0x00,0xc0
,0x00,0x80,0x01,0x90
,0x08,0x60,0x02,0x00
,0x00,0x3c,0x0c,0x00
,0x00,0x07,0xf8,0x00
,0x00,0x00,0x00,0x80
,0x00,0x80,0x00,0x00
,0x00,0x20,0x04,0x00
,0x00,0x0f,0xf0,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00

};

static const unsigned char PROGMEM strop_bmp[] =
{
0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x03,0x80,0x00
,0x00,0x07,0xc0,0x00
,0x00,0x0f,0xc0,0x00
,0x00,0x0f,0xe0,0x00
,0x00,0x1f,0xe0,0x00
,0x00,0x1f,0xf0,0x00
,0x00,0x3f,0xf0,0x00
,0x00,0x7f,0xf8,0x00
,0x00,0x7f,0xf8,0x00
,0x00,0xff,0xfc,0x00
,0x00,0xff,0xfc,0x00
,0x01,0xff,0xfe,0x00
,0x01,0xff,0xff,0x00
,0x03,0xff,0xff,0x00
,0x03,0xff,0xff,0x00
,0x03,0xff,0xff,0x00
,0x03,0xff,0xff,0x00
,0x03,0xff,0xff,0x00
,0x03,0xff,0xfe,0x00
,0x03,0xff,0xfe,0x00
,0x00,0xff,0xfe,0x00
,0x00,0x1f,0xf0,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00


};

static const unsigned char PROGMEM soare_bmp[] =
{
0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x80,0x00
,0x08,0x00,0x80,0x00
,0x04,0x00,0x82,0x00
,0x06,0x10,0x82,0x10
,0x02,0x18,0x86,0x30
,0x03,0x08,0x84,0x60
,0x00,0x8c,0x88,0x40
,0x00,0xc7,0xf8,0xc0
,0x00,0x6f,0xf8,0x80
,0x3c,0x3f,0xff,0xa0
,0x06,0x3f,0xff,0xe0
,0x01,0xff,0xff,0x80
,0x07,0xff,0xff,0x00
,0x00,0xff,0xff,0xff
,0x00,0xff,0xff,0x80
,0x03,0xff,0xff,0x83
,0x0c,0xff,0xff,0xfc
,0x38,0x7f,0xff,0x00
,0x41,0xff,0xff,0x80
,0x06,0x3f,0xfe,0xc0
,0x0c,0x3f,0xfe,0x40
,0x00,0x2f,0xfa,0x20
,0x00,0x43,0xf3,0x30
,0x00,0xc2,0x11,0x18
,0x01,0x82,0x11,0x88
,0x02,0x06,0x10,0x8c
,0x00,0x04,0x10,0x00
,0x00,0x04,0x10,0x00
,0x00,0x04,0x00,0x00
,0x00,0x0c,0x00,0x00
};

static const unsigned char PROGMEM fulg_bmp[] =
{
0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x02,0x00,0x00
,0x00,0x32,0x60,0x00
,0x00,0x1a,0xc0,0x00
,0x00,0x0f,0x80,0x00
,0x00,0x42,0x00,0x00
,0x00,0x32,0x10,0x00
,0x00,0x1e,0x70,0x00
,0x10,0x43,0xc0,0x00
,0x18,0x42,0x18,0x10
,0x08,0x62,0x30,0x60
,0x04,0x32,0x47,0x80
,0x1f,0xff,0xff,0xfc
,0x06,0x32,0x26,0x20
,0x0c,0x62,0x31,0x18
,0x18,0xc2,0x19,0x84
,0x10,0x02,0x08,0xc0
,0x00,0x0f,0xe8,0x00
,0x00,0x1a,0x20,0x00
,0x00,0x02,0x00,0x00
,0x00,0x06,0x00,0x00
,0x00,0x0f,0x80,0x00
,0x00,0x1a,0x60,0x00
,0x00,0x12,0x20,0x00
,0x00,0x03,0x00,0x00
,0x00,0x06,0x80,0x00
,0x00,0x18,0xc0,0x00
,0x00,0x30,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00

};

static const unsigned char PROGMEM foc_bmp[] =
{
0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x08,0x00
,0x00,0x00,0x08,0x00
,0x00,0x00,0x08,0x00
,0x00,0x00,0x0c,0x00
,0x00,0x00,0x14,0x00
,0x00,0x42,0x14,0x00
,0x00,0x43,0x14,0x00
,0x00,0x43,0x14,0xc0
,0x00,0x63,0x94,0xc0
,0x00,0xb2,0x95,0x40
,0x00,0x92,0x95,0x40
,0x00,0x9a,0xe5,0x40
,0x00,0x8e,0x62,0xc0
,0x00,0x84,0x62,0x80
,0x00,0x80,0x00,0x80
,0x01,0x80,0x00,0x80
,0x01,0x00,0x00,0x80
,0x01,0x00,0x01,0x80
,0x01,0x00,0x01,0x00
,0x01,0x80,0x03,0x00
,0x00,0xc0,0x02,0x00
,0x00,0x60,0x0c,0x00
,0x00,0x38,0x38,0x00
,0x00,0x0f,0xe0,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00

};



void setup() {
  Serial.begin(115200);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(2000); // Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();

  // Draw a single pixel in white
  display.drawPixel(10, 10, WHITE);
  display.display();
  
  // Draw logo bitmap image
   draw_logo_bitmap();
   delay(1000);
  // Invert and restore display, pausing in-between
  display.invertDisplay(true);
  delay(1000);
  display.invertDisplay(false);
  delay(1000);


  //testanimate(happy_bmp, LOGO_WIDTH, LOGO_HEIGHT); // Animate bitmaps
}

void loop() {

 
  LIGHT = analogRead(A0); 
  LIGHT = (LIGHT / 1024) * 100; 
  Serial.print("LIGHT : ");
  Serial.print(LIGHT);
  Serial.println(" %");

  
  MOISTURE = analogRead(A1); 
  MOISTURE = (MOISTURE / 1024) * 100;
  MOISTURE = (MOISTURE - 100) * (-1); 
  Serial.print("MOISTURE : ");
  Serial.print(MOISTURE);
  Serial.println(" %");


  HUMID = dht.readHumidity();
  TEMP = dht.readTemperature();
  Serial.print("TEMPERATURE : ");
  Serial.print(TEMP);
  Serial.println(" C");


  if (MOISTURE < 50)
    { while (MOISTURE < 50)
          {draw_sad_bitmap();
           delay(1000);
           draw_strop_bitmap();
           MOISTURE = analogRead(A1); 
           MOISTURE = (MOISTURE / 1024) * 100;
           MOISTURE = (MOISTURE - 100) * (-1);
           }
     }
  else 
    if (LIGHT < 50 )
   {
      while(LIGHT < 50)
       {
        draw_sad_bitmap();
        delay(1000);
        draw_soare_bitmap();
        LIGHT = analogRead(A0); 
        LIGHT = (LIGHT / 1024) * 100; 
       }
    }
    else
      if(TEMP < 20)
      {
        while(TEMP < 20)
        {draw_sad_bitmap();
         delay(1000);
         draw_fulg_bitmap();
         TEMP = dht.readTemperature();
        }
      }
    else
      if(TEMP > 35)
      {
        while(TEMP >35)
        {draw_sad_bitmap();
         delay(1000);
         draw_foc_bitmap();
         TEMP = dht.readTemperature();
        }
      }
    else
    draw_happy_bitmap();
  

  //if (TEMP < 50 && TEMP > 5) {
    if (MOISTURE > 70) {
      //if (LIGHT > 80)
        draw_happy_bitmap();
    }
  //}
  delay(4000);
}

void draw_logo_bitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}

void draw_sad_bitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    sad_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}

void draw_happy_bitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    happy_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}

void draw_strop_bitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    strop_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}

void draw_soare_bitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    soare_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}

void draw_fulg_bitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    fulg_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}

void draw_foc_bitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
     foc_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}
